import matplotlib.patches as mpatches
def add_label(violin, label,labels):
    color = violin["bodies"][0].get_facecolor().flatten()
    labels.append((mpatches.Patch(color=color), label))

def plot_distances(distances_dictionary):
    Model_name=list(distances_dictionary["Train"].keys())[0].split("_")[0]
    plt.figure(figsize=(20,10))
    plt.title(Model_name)
    
    train_data=distances_dictionary["Train"]
    validation_data=distances_dictionary["Validation"]
    for i,model_name in enumerate(distances_dictionary["Train"].keys()):
        i=i*2
        print(i,model_name)
        plt.scatter(y=train_data[model_name]["shared"] ,
                    x=i*np.ones(train_data[model_name]["shared"][0].shape)-0.5,alpha=0.1,s=150.0,color="r",
                    )
        plt.scatter(y=validation_data[model_name]["shared"] ,
                    x=i*np.ones(validation_data[model_name]["shared"][0].shape)-0.25,alpha=0.1,s=150.0,color="b",
                    label="validation_shared_space")
        plt.scatter(y=train_data[model_name]["privated"] ,
                    x=0.25+i*np.ones(train_data[model_name]["privated"][0].shape),alpha=0.1,s=150.0,color="r",
                    label="training_privated_space")
        plt.scatter(y=validation_data[model_name]["privated"] ,
                    x=0.5+i*np.ones(validation_data[model_name]["privated"][0].shape),alpha=0.1,s=150.0,color="b",
                   label="validation_privated_space")
    labels = []
    vts=plt.violinplot(
        [distances_dictionary['Train'][k]["shared"][0] for k in distances_dictionary['Train'].keys()],
        positions=np.array(list(range(0,10,2)))-0.5,showmeans=True)
    add_label(vts,"training_shared_space",labels)
    vvs=plt.violinplot(
        [distances_dictionary['Validation'][k]["shared"][0] for k in distances_dictionary['Validation'].keys()],
        positions=np.array(list(range(0,10,2)))-0.25,showmeans=True)
    add_label(vvs,"validation_shared_space",labels)
    vtp=plt.violinplot(
        [distances_dictionary['Train'][k]["privated"][0] for k in distances_dictionary['Train'].keys()],
        positions=np.array(list(range(0,10,2)))+0.25,showmeans=True)
    add_label(vtp,"training_privated_space",labels)
    vvp=plt.violinplot(
        [distances_dictionary['Validation'][k]["privated"][0] for k in distances_dictionary['Validation'].keys()],
        positions=np.array(list(range(0,10,2)))+0.5,showmeans=True)
    add_label(vvp,"validation_privated_space",labels)
    
    plt.legend(*zip(*labels), loc=2)
    return plt




def plot_multiple_models(distances_dictionaries,figure,distance_name):
    
    plt.title(distance_name)
    
    for i,distances_dictionary in enumerate(distances_dictionaries):
        train_data=distances_dictionary["Train"]
        validation_data=distances_dictionary["Validation"]
        for j,model_name in enumerate(distances_dictionary["Train"].keys()):
            i=i*2
            print(i,model_name)
            plt.scatter(y=train_data[model_name]["shared"] ,
                        x=i*np.ones(train_data[model_name]["shared"][0].shape)-0.5,alpha=0.1,s=150.0,color="r",
                        )
            plt.scatter(y=validation_data[model_name]["shared"] ,
                        x=i*np.ones(validation_data[model_name]["shared"][0].shape)-0.25,alpha=0.1,s=150.0,color="b",
                        label="validation_shared_space")
            plt.scatter(y=train_data[model_name]["privated"] ,
                        x=0.25+i*np.ones(train_data[model_name]["privated"][0].shape),alpha=0.1,s=150.0,color="r",
                        label="training_privated_space")
            plt.scatter(y=validation_data[model_name]["privated"] ,
                        x=0.5+i*np.ones(validation_data[model_name]["privated"][0].shape),alpha=0.1,s=150.0,color="b",
                       label="validation_privated_space")
        labels = []
        vts=plt.violinplot(
            [distances_dictionary['Train'][k]["shared"][0] for k in distances_dictionary['Train'].keys()],
            positions=np.array(list(range((5*2)*i,(5*2)*(i+1),2)))-0.5,showmeans=True)
        add_label(vts,"training_shared_space",labels)
        vvs=plt.violinplot(
            [distances_dictionary['Validation'][k]["shared"][0] for k in distances_dictionary['Validation'].keys()],
            positions=np.array(list(range((5*2)*i,(5*2)*(i+1),2)))-0.25,showmeans=True)
        add_label(vvs,"validation_shared_space",labels)
        vtp=plt.violinplot(
            [distances_dictionary['Train'][k]["privated"][0] for k in distances_dictionary['Train'].keys()],
            positions=np.array(list(range((5*2)*i,(5*2)*(i+1),2)))+0.25,showmeans=True)
        add_label(vtp,"training_privated_space",labels)
        vvp=plt.violinplot(
            [distances_dictionary['Validation'][k]["privated"][0] for k in distances_dictionary['Validation'].keys()],
            positions=np.array(list(range((5*2)*i,(5*2)*(i+1),2)))+0.5,showmeans=True)
        add_label(vvp,"validation_privated_space",labels)

        plt.legend(*zip(*labels), loc=2)
        plt.xticks(list(range((5*2)*i,(5*2)*(i+1),2)),list(distances_dictionary["Train"].keys()))
    return plt